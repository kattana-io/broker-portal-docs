{
  "swagger": "2.0",
  "info": {
    "title": "Broker Portal Trading Service",
    "description": "Welcome to Broker API provides spot operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf. ",
    "version": "0.0.1",
    "contact": {
      "name": "CEX Trading API project"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/spot/accounts": {
      "get": {
        "summary": "List spot accounts",
        "operationId": "BrokerPortalAPI_ListSpotAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccounts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      }
    },
    "/v1/spot/batch_orders": {
      "post": {
        "summary": "Create a batch of orders",
        "description": "Batch orders requirements:  1. custom order field \u0026#x60;text\u0026#x60; is required 2. At most 4 currency pairs, maximum 10 orders each, are allowed in one request 3. No mixture of spot orders and margin orders, i.e. \u0026#x60;account\u0026#x60; must be identical for all orders",
        "operationId": "BrokerPortalAPI_CreateBatchOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiBatchOrders"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BrokerPortalAPI"
        ]
      }
    },
    "/v1/spot/open_orders": {
      "get": {
        "summary": "List all open orders",
        "description": "List open orders in all currency pairs.  Note that pagination parameters affect record number in each currency pair\u0026#39;s open order list. No pagination is applied to the number of currency pairs returned.\nAll currency pairs with open orders will be returned.  Spot,portfolio and margin orders are returned by default. To list cross margin orders, \u0026#x60;account\u0026#x60; must be set to \u0026#x60;cross_margin\u0026#x60;",
        "operationId": "BrokerPortalAPI_ListSpotOpenOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListOpenOrders"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "currency_pair",
            "description": "Retrieve results with specified currency pair.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "List orders based on status.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Maximum number of records to be returned. If status is open, maximum of limit is 100.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account",
            "description": "Specify operation account.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "description": "Start timestamp of the query.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "to",
            "description": "Time range ending, default to current time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "side",
            "description": "All bids or asks. Both included if not specified.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "Order ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exchange",
            "description": "Exchange.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      }
    },
    "/v1/spot/order_book": {
      "get": {
        "summary": "Retrieve order book",
        "description": "Order book will be sorted by price from high to low on bids; low to high on asks",
        "operationId": "BrokerPortalAPI_ListOrderBook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "currency_pair",
            "description": "Currency pair.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "interval",
            "description": "Order depth. 0 means no aggregation is applied. default to 0.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Maximum number of order depth data in asks or bids.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "with_id",
            "description": "Return order book ID.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exchange",
            "description": "Exchange.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      }
    },
    "/v1/spot/orders": {
      "get": {
        "summary": "List orders",
        "description": "Spot, portfolio and margin orders are returned by default. If cross margin orders are needed, \u0026#x60;account\u0026#x60; must be set to \u0026#x60;cross_margin\u0026#x60;\nWhen \u0026#x60;status\u0026#x60; is \u0026#x60;open\u0026#x60;, i.e., listing open orders, only pagination parameters \u0026#x60;page\u0026#x60; and \u0026#x60;limit\u0026#x60; are supported and \u0026#x60;limit\u0026#x60; cannot be larger than 100.\nQuery by \u0026#x60;side\u0026#x60; and time range parameters \u0026#x60;from\u0026#x60; and \u0026#x60;to\u0026#x60; are not supported.  When \u0026#x60;status\u0026#x60; is \u0026#x60;finished\u0026#x60;, i.e.,\nlisting finished orders, pagination parameters, time range parameters \u0026#x60;from\u0026#x60; and \u0026#x60;to\u0026#x60;, and \u0026#x60;side\u0026#x60; parameters are all supported. Time range parameters are handled as order finish time.",
        "operationId": "BrokerPortalAPI_ListSpotOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrders"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "currency_pair",
            "description": "Retrieve results with specified currency pair.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "List orders based on status.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Maximum number of records to be returned. If status is open, maximum of limit is 100.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account",
            "description": "Specify operation account.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "description": "Start timestamp of the query.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "to",
            "description": "Time range ending, default to current time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "side",
            "description": "All bids or asks. Both included if not specified.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "Order ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exchange",
            "description": "Exchange.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      },
      "delete": {
        "summary": "Cancel all `open` orders in specified currency pair",
        "description": "If \u0026#x60;account\u0026#x60; is not set, all open orders, including spot, portfolio, margin and cross margin ones, will be cancelled.  You can set \u0026#x60;account\u0026#x60; to cancel only orders within the specified account",
        "operationId": "BrokerPortalAPI_CancelAllSpotOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrders"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "Order ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency_pair",
            "description": "Currency pair.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account",
            "description": "Specify operation account. Default to spot ,portfolio and margin account if not specified.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exchange",
            "description": "Exchange.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      },
      "post": {
        "summary": "Create an order",
        "description": "You can place orders with spot, portfolio, margin or cross margin account through setting the \u0026#x60;account \u0026#x60;field.\n It defaults to \u0026#x60;spot\u0026#x60;, which means spot account is used to place orders.if the user is in portfolio mode, it defaults to the portfolio account.\n When margin account is used, i.e., \u0026#x60;account\u0026#x60; is \u0026#x60;margin\u0026#x60;, \u0026#x60;auto_borrow\u0026#x60; field can be set to \u0026#x60;true\u0026#x60; to enable\n the server to borrow the amount lacked using \u0026#x60;POST /margin/loans\u0026#x60; when your account\u0026#39;s balance is not enough. Whether margin orders\u0026#39;\n fill will be used to repay margin loans automatically is determined by the auto repayment setting in your **margin account**, which can be updated or\n queried using \u0026#x60;/margin/auto_repay\u0026#x60; API.  When cross margin account is used, i.e., \u0026#x60;account\u0026#x60; is \u0026#x60;cross_margin\u0026#x60;, \u0026#x60;auto_borrow\u0026#x60; can also be\n enabled to achieve borrowing the insufficient amount automatically if cross account\u0026#39;s balance is not enough. But it differs from margin account that automatic repayment is\n determined by order\u0026#39;s \u0026#x60;auto_repay\u0026#x60; field and only current order\u0026#39;s fill will be used to repay cross margin loans.\n Automatic repayment will be triggered when the order is finished, i.e., its status is either \u0026#x60;cancelled\u0026#x60; or \u0026#x60;closed\u0026#x60;.\n **Order status**  An order waiting to be filled is \u0026#x60;open\u0026#x60;, and it stays \u0026#x60;open\u0026#x60; until it is filled totally. If fully filled, order is\n finished and its status turns to \u0026#x60;closed\u0026#x60;.If the order is cancelled before it is totally filled, whether or not partially filled,\n its status is \u0026#x60;cancelled\u0026#x60;. **Iceberg order**  \u0026#x60;iceberg\u0026#x60; field can be used to set the amount shown. Set to \u0026#x60;-1\u0026#x60;\n to hide the order completely. Note that the hidden part\u0026#39;s fee will be charged using taker\u0026#39;s fee rate. **Self Trade Prevention**\n - Set \u0026#x60;stp_act\u0026#x60; to decide the strategy of self-trade prevention. For detailed usage, refer to the \u0026#x60;stp_act\u0026#x60; parameter in request body",
        "operationId": "BrokerPortalAPI_CreateSpotOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrder"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOrder"
            }
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ],
        "security": [
          {
            "PublicKey": [],
            "Sign": [],
            "Timestamp": []
          }
        ]
      }
    },
    "/v1/spot/orders/{order_id}": {
      "get": {
        "summary": "GetOrder Get a single order",
        "description": "Spot, portfolio and margin orders are queried by default. If cross margin orders are needed or portfolio margin account are used, account must be set to cross_margin.",
        "operationId": "BrokerPortalAPI_GetSpotOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrder"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "Order ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_pair",
            "description": "Retrieve results with specified currency pair.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "List orders based on status.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Maximum number of records to be returned. If status is open, maximum of limit is 100.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account",
            "description": "Specify operation account.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "description": "Start timestamp of the query.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "to",
            "description": "Time range ending, default to current time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "side",
            "description": "All bids or asks. Both included if not specified.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exchange",
            "description": "Exchange.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      },
      "delete": {
        "summary": "Cancel a single order",
        "description": "Spot,portfolio and margin orders are cancelled by default. If trying to cancel cross margin orders or portfolio margin account are used, account must be set to cross_margin",
        "operationId": "BrokerPortalAPI_CancelSpotOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrder"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "Order ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency_pair",
            "description": "Currency pair.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account",
            "description": "Specify operation account. Default to spot ,portfolio and margin account if not specified.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exchange",
            "description": "Exchange.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED_EXCHANGE",
              "GATE"
            ],
            "default": "UNDEFINED_EXCHANGE"
          }
        ],
        "tags": [
          "BrokerPortalAPI"
        ]
      }
    }
  },
  "definitions": {
    "apiAccount": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "title": "Currency detail"
        },
        "available": {
          "type": "string",
          "title": "Available amount"
        },
        "locked": {
          "type": "string",
          "title": "Locked amount, used in trading"
        }
      }
    },
    "apiAccounts": {
      "type": "object",
      "properties": {
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccount"
          }
        }
      }
    },
    "apiBatchOrder": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "title": "User defined information. If not empty, must follow the rules below:\n1. prefixed with `t-`\n2. no longer than 28 bytes without `t-` prefix\n3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)"
        },
        "succeeded": {
          "type": "boolean",
          "title": "Whether the batch of orders succeeded"
        },
        "label": {
          "type": "string",
          "title": "Error label, if any, otherwise an empty string"
        },
        "message": {
          "type": "string",
          "title": "Detailed error message, if any, otherwise an empty string"
        },
        "id": {
          "type": "string",
          "title": "Order ID"
        },
        "create_time": {
          "type": "string",
          "title": "Creation time of order"
        },
        "update_time": {
          "type": "string",
          "title": "Last modification time of order"
        },
        "create_time_ms": {
          "type": "string",
          "format": "int64",
          "title": "Creation time of order (in milliseconds)"
        },
        "update_time_ms": {
          "type": "string",
          "format": "int64",
          "title": "Last modification time of order (in milliseconds)"
        },
        "status": {
          "type": "string",
          "title": "Order status  - `open`: to be filled - `closed`: filled - `cancelled`: cancelled"
        },
        "currency_pair": {
          "type": "string",
          "title": "Currency pair"
        },
        "type": {
          "type": "string",
          "title": "Order Type    - limit : Limit Order - market : Market Order"
        },
        "account": {
          "type": "string",
          "title": "Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account, portfolio - portfolio account"
        },
        "side": {
          "type": "string",
          "title": "Order side"
        },
        "amount": {
          "type": "string",
          "title": "Trade amount"
        },
        "price": {
          "type": "string",
          "title": "Order price"
        },
        "time_in_force": {
          "type": "string",
          "title": "Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order\nthat always enjoys a maker fee - fok: FillOrKill, fill either completely or none"
        },
        "iceberg": {
          "type": "string",
          "description": "Amount to display for the iceberg order. Null or 0 for normal orders.  Hiding all amount is not supported."
        },
        "auto_borrow": {
          "type": "boolean",
          "description": "Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough."
        },
        "auto_repay": {
          "type": "boolean",
          "description": "Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled.\nNote that:\n1. This field is only effective for cross margin orders. Margin account does not support setting auto repayment for orders.\n2. `auto_borrow` and `auto_repay` cannot be both set to true in one order."
        },
        "left": {
          "type": "string",
          "title": "Amount left to fill"
        },
        "fill_price": {
          "type": "string",
          "title": "Total filled in quote currency. Deprecated in favor of `filled_total`"
        },
        "filled_total": {
          "type": "string",
          "title": "Total filled in quote currency"
        },
        "fee": {
          "type": "string",
          "title": "Fee deducted"
        },
        "fee_currency": {
          "type": "string",
          "title": "Fee currency unit"
        },
        "point_fee": {
          "type": "string",
          "title": "Points used to deduct fee"
        },
        "gt_fee": {
          "type": "string",
          "title": "GT used to deduct fee"
        },
        "gt_discount": {
          "type": "boolean",
          "title": "Whether GT fee discount is used"
        },
        "rebated_fee": {
          "type": "string",
          "title": "Rebated fee"
        },
        "rebated_fee_currency": {
          "type": "string",
          "title": "Rebated fee currency unit"
        },
        "stp_id": {
          "type": "integer",
          "format": "int32",
          "title": "Orders between users in the same `stp_id` group are not allowed to be self-traded\n1. If the `stp_id` of two orders being matched is non-zero and equal, they will not be executed.\nInstead, the corresponding strategy will be executed based on the `stp_act` of the taker.\n2. `stp_id` returns `0` by default for orders that have not been set for `STP group`"
        },
        "stp_act": {
          "type": "string",
          "title": "Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies\n1. After users join the `STP Group`, he can pass `stp_act` to limit the user's self-trade prevetion strategy.\n If `stp_act` is not passed, the default is `cn` strategy。\n2. When the user does not join the `STP group`, an error will be returned when passing the `stp_act` parameter。\n3. If the user did not use 'stp_act' when placing the order, 'stp_act' will return '-'  - cn: Cancel newest,\n Cancel new orders and keep old ones - co: Cancel oldest, Cancel old orders and keep new ones - cb: Cancel both,\n Both old and new orders will be cancelled"
        },
        "finish_as": {
          "type": "string",
          "title": "How the order was finished.  - open: processing - filled: filled totally - cancelled:\nmanually cancelled - ioc: time in force is `IOC`, finish immediately - stp: cancelled because self trade prevention"
        }
      }
    },
    "apiBatchOrders": {
      "type": "object",
      "properties": {
        "batch_order": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiBatchOrder"
          }
        }
      }
    },
    "apiExchange": {
      "type": "string",
      "enum": [
        "UNDEFINED_EXCHANGE",
        "GATE"
      ],
      "default": "UNDEFINED_EXCHANGE"
    },
    "apiListOpenOrders": {
      "type": "object",
      "properties": {
        "OpenOrders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOpenOrders"
          }
        }
      }
    },
    "apiOpenOrders": {
      "type": "object",
      "properties": {
        "currency_pair": {
          "type": "string"
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        },
        "Orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrder"
          }
        }
      }
    },
    "apiOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Order ID"
        },
        "uuid": {
          "type": "string",
          "title": "User custom ID"
        },
        "exchange": {
          "$ref": "#/definitions/apiExchange",
          "title": "Exchange"
        },
        "currency_pair": {
          "type": "string",
          "title": "Currency pair"
        },
        "create_time": {
          "type": "string",
          "title": "Creation time of order"
        },
        "update_time": {
          "type": "string",
          "title": "Last modification time of order"
        },
        "create_time_ms": {
          "type": "string",
          "format": "int64",
          "title": "Creation time of order (in milliseconds)"
        },
        "update_time_ms": {
          "type": "string",
          "format": "int64",
          "title": "Last modification time of order (in milliseconds)"
        },
        "status": {
          "type": "string",
          "title": "Order status  - `open`: to be filled - `closed`: filled - `cancelled`: cancelled"
        },
        "type": {
          "type": "string",
          "title": "Order Type    - limit : Limit Order - market : Market Order"
        },
        "account": {
          "type": "string",
          "title": "Account type, spot - spot account, margin - margin account, cross_margin - cross margin account,\nportfolio - portfolio account  Portfolio margin account must set to `cross_margin`"
        },
        "side": {
          "type": "string",
          "title": "Order side"
        },
        "amount": {
          "type": "string",
          "title": "When `type` is limit, it refers to base currency.\nFor instance, `BTC_USDT` means `BTC`  When `type` is `market`, it refers to different currency according\nto `side`  - `side` : `buy` means quote currency,\n`BTC_USDT` means `USDT` - `side` : `sell` means base currency，`BTC_USDT` means `BTC`"
        },
        "price": {
          "type": "string",
          "title": "Price can't be empty when `type`= `limit`"
        },
        "time_in_force": {
          "type": "string",
          "title": "Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled,\nmakes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none\nOnly `ioc` and `fok` are supported when `type`=`market`"
        },
        "iceberg": {
          "type": "string",
          "description": "Amount to display for the iceberg order. Null or 0 for normal orders.  Hiding all amount is not supported."
        },
        "auto_borrow": {
          "type": "boolean",
          "description": "Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough."
        },
        "auto_repay": {
          "type": "boolean",
          "description": "Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled.\nNote that:  1. This field is only effective for cross margin orders. Margin account does not support setting auto\nrepayment for orders. 2. `auto_borrow` and `auto_repay` cannot be both set to true in one order."
        },
        "left": {
          "type": "string",
          "title": "Amount left to fill"
        },
        "fill_price": {
          "type": "string",
          "title": "Total filled in quote currency. Deprecated in favor of `filled_total`"
        },
        "filled_total": {
          "type": "string",
          "title": "Total filled in quote currency"
        },
        "avg_deal_price": {
          "type": "string",
          "title": "Average fill price"
        },
        "fee": {
          "type": "string",
          "title": "Fee deducted"
        },
        "fee_currency": {
          "type": "string",
          "title": "Fee currency unit"
        },
        "point_fee": {
          "type": "string",
          "title": "Points used to deduct fee"
        },
        "gt_fee": {
          "type": "string",
          "title": "GT used to deduct fee"
        },
        "gt_maker_fee": {
          "type": "string",
          "title": "GT used to deduct maker fee"
        },
        "gt_taker_fee": {
          "type": "string",
          "title": "GT used to deduct taker fee"
        },
        "gt_discount": {
          "type": "boolean",
          "title": "Whether GT fee discount is used"
        },
        "rebated_fee": {
          "type": "string",
          "title": "Rebated fee"
        },
        "rebated_fee_currency": {
          "type": "string",
          "title": "Rebated fee currency unit"
        },
        "stp_id": {
          "type": "integer",
          "format": "int32",
          "title": "Orders between users in the same `stp_id` group are not allowed to be self-traded  1. If the `stp_id` of two\norders being matched is non-zero and equal, they will not be executed. Instead, the corresponding strategy will be\nexecuted based on the `stp_act` of the taker. 2. `stp_id` returns `0` by default for orders that have not been set for `STP group`"
        },
        "stp_act": {
          "type": "string",
          "title": "Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies\n1. After users join the `STP Group`, he can pass `stp_act` to limit the user's self-trade prevetion strategy.\nIf `stp_act` is not passed, the default is `cn` strategy。 2. When the user does not join the `STP group`, an error\nwill be returned when passing the `stp_act` parameter。 3. If the user did not use 'stp_act' when placing the order,\n'stp_act' will return '-'  - cn: Cancel newest, Cancel new orders and keep old ones - co: Cancel oldest, Cancel\nold orders and keep new ones - cb: Cancel both, Both old and new orders will be cancelled"
        },
        "finish_as": {
          "type": "string",
          "title": "How the order was finished.  - open: processing - filled: filled totally - cancelled: manually cancelled - ioc:\ntime in force is `IOC`, finish immediately - stp: cancelled because self trade prevention"
        }
      }
    },
    "apiOrderBookResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Order book ID, which is updated whenever the order book is changed. Valid only when `with_id` is set to `true`"
        },
        "current": {
          "type": "string",
          "format": "int64",
          "title": "The timestamp of the response data being generated (in milliseconds)"
        },
        "update": {
          "type": "string",
          "format": "int64",
          "title": "The timestamp of when the orderbook last changed (in milliseconds)"
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiquote"
          },
          "title": "Asks order depth"
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiquote"
          },
          "title": "Bids order depth"
        }
      }
    },
    "apiOrders": {
      "type": "object",
      "properties": {
        "order": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrder"
          }
        },
        "exchange": {
          "$ref": "#/definitions/apiExchange"
        }
      }
    },
    "apiquote": {
      "type": "object",
      "properties": {
        "quote": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "PublicKey": {
      "type": "apiKey",
      "description": "Set request header KEY to the key.",
      "name": "KEY",
      "in": "header"
    },
    "Sign": {
      "type": "apiKey",
      "description": "Set request header SIGN to encrypted request signature. Refer to next section for how signature string is generated. Signature generation method is HexEncode(HMAC_SHA512(secret, signature_string)), i.e., the hexadecimal digest output of HMAC-SHA512 with APIv4 secret as secret and signature string as message",
      "name": "SIGN",
      "in": "header"
    },
    "Timestamp": {
      "type": "apiKey",
      "description": "Set request header Timestamp to current time formatted in Unix time in seconds. Pay attention that the gap between its value and current time cannot exceed 60 seconds",
      "name": "Timestamp",
      "in": "header"
    }
  },
  "security": [
    {
      "PublicKey": [],
      "Sign": [],
      "Timestamp": []
    }
  ]
}
